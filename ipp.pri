#
#           Простое добавление поддержки Intel IPP в проект Qt
#         (работает только в комплекте с этой сборкой файлов IPP)
#----------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------
# Для добавления в проект поддержки библиотеки Intel Integrated Performance Primitives
# требуется всего-лишь добавить в файл проекта *.pro этот файл.
#   
# Делается это включением в файл проекта следующей строки:
#
#       include(<путь до библиотеки>/ipp.pri)
#
#     Здесь <путь до библиотеки>  - это место расположения этого файла.
#     Путь может быть абсолютным, например таким:
#             include(D:/Qt/LIBS/ipp.pri)
#         или относительным:
#             include(../../LIBS/ipp.pri)
#     Здесь "../../LIBS/ipp.pri" означает:
#         " чтобы найти файл ipp.pri нужно от места расположения pro-файла
#         поднятся вверх на два уровня в иерархии каталогов, а затем зайти в директорию IPP".
#
#    По умолчанию, подключаются следующие част библиотеки:
#        ipps  - Signal Processing;
#        ippvm - Vector Math.
#    Для подключения других частей требуется добавить их имена в переменную IPP.
#        Например, так:
#            IPP += ippi ippcv
#        добавляются
#            ippi  - Image Processing;
#            ippcv - Computer Vision.
#
# Кроме добавления необходимых файлов в проект, вызывается скрипт для копирования
# IPP DLL к месту расположения компилируемого исполняемого файла,
# копируются только те файлы, имена которых отсутствуют в папке назначения.
#----------------------------------------------------------------------------------------
# Никаких гарантий работоспособности и обязательств. 31/07/2019
# + поддержка MinGW-64 (различение платформ и подключение необходимых LIB-файлов; копирование нужных DLL)
#----------------------------------------------------------------------------------------
   #подключаем вспомогательные файлы
    include(fileCopyFunction.pri)       # файл содержащий скрипт для копирования DLL в папку к исполняемому файлу
    include(platformTestFunction.pri)   # файл с функцией определения платформы 32/64

####Подключаем к проекту библиотеку Intel Integrated Performance Primitives
    IPP         = ipps ippvm $$IPP # эти части библиотеки подключаются по умолчанию
    IPP         = $$lower( $$IPP ) # используем только нижний регистр
  # определяем переменную, содержащую путь к библиотеке ($$PWD - местоположение обрабатываемого файла, встроенная переменная qmake, см. документацию)
    IPP_PATH    = $$PWD/IPP
  # определяем переменные, содержащие основы путей к каталогам с lib-файлами и DLL
    IPP_LIB     = $$IPP_PATH/lib
    IPP_BIN     = $$IPP_PATH/bin
  # определяем платформу
    PLATFORM    = $$platformTest()          # вызываем функцию определения платформы - см. файл 'platformTestFunction.pri'
    #message( 1--->>>> $$PLATFORM )         # отладочный вывод
    equals(PLATFORM, "minGW32") {           # проверяем результат на равенство "minGW32"
        PLATFORM = 32
    } else { equals(PLATFORM, "minGW64") {  # проверяем результат на равенство "minGW64"
        PLATFORM = 64
    } else {                                # если иное - то опустошаем переменную
        PLATFORM =
    }}
    #message( 2--->>>> $$PLATFORM )         #отладочный вывод
   # если платформа определена - копируем подключаем к проекту библиотеку и копируем файлы DLL
    !isEmpty( PLATFORM) {
      # дополняем переменные, содержащие пути к каталогам с lib-файлами и DLL
        IPP_LIB = $$join( IPP_LIB, "", "" , $$PLATFORM )    # получаем что-то вроде "../IPP/lib32" или "../IPP/lib64"
        IPP_BIN = $$join( IPP_BIN, "", "" , $$PLATFORM )    # получаем что-то вроде "../IPP/bin32" или "../IPP/bin64"
        #message( $$IPP_LIB)                                # отладочный вывод
        #message( $$IPP_BIN)                                # отладочный вывод

      # добавление в проект основных файлов библиотеки (они должны обязательно добавляться первыми)
        INCLUDEPATH += $$IPP_PATH/include                   # добавляем путь до заголовочных файлов библиотеки
        LIBS        += $$IPP_LIB/ippcore.lib                # добавляем в проект основную библиотеку IPP (она должна быть добавлена первой)
        copyFilesToExeFolder( $$IPP_BIN, $$PLATFORM - IPP ) # выполняем скрипт копирования для файлов в каталоге $$IPP_BIN

      # добавление в проект выбранных частей библиотеки
        for( i, $$list($$IPP) ) {
            # т.к. при простом сращивании строк, содержащих переменную и точку есть проблемы, используем спец.функцию
            ippTMP      = $$join( i, "", "$$IPP_LIB/", ".lib" ) # получаем что-то вроде "../IPP/lib32/ipps.lib"
            #message( ippTMP = $$ippTMP)                # отладочный вывод
            LIBS        += $$ippTMP                     # добавляем в проект соответствующую библиотеку
            # выполняем скрипт копирования для файлов в каталоге $$IPP_BIN/"имя раздела" к компилируемому исполняемому файлу
            copyFilesToExeFolder( $$IPP_BIN/$$i, $$PLATFORM - $$upper($$i)  )
        }
        #message( LIBS = $$LIBS)                        # отладочный вывод

      # включаем в проект дополнительные инструменты для работы с библиотекой
        INCLUDEPATH += $$IPP_PATH/custom                # путь до заголовочного файла с описанием доп. функционала
        SOURCES     += $$IPP_PATH/custom/ippCustom.cpp  # добавляем в проект файл с дополнительным исходным кодом
        HEADERS     += $$IPP_PATH/custom/ippCustom.h    # добавляем в проект заголовочный файл с описанием доп. функционала
    } else {
        message( "the platform not detected --- do nothing" )
    }
#----------------------------------------------------------------------------------------
